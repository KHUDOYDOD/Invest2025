import { NextResponse } from "next/server"
import { createClient } from "@/lib/supabase/server"

export async function PUT(request: Request, { params }: { params: { id: string } }) {
  try {
    const { id } = params
    const body = await request.json()
    const { status, admin_comment } = body

    console.log("üîÑ Updating deposit request:", id, "Status:", status)

    const supabase = createClient()
    if (!supabase) {
      console.error("‚ùå Database connection failed")
      return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" }, { status: 500 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    const { data: depositRequest, error: requestError } = await supabase
      .from("deposit_requests")
      .select("*")
      .eq("id", id)
      .single()

    if (requestError || !depositRequest) {
      console.error("‚ùå Deposit request not found:", requestError)
      return NextResponse.json({ error: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    const { error: updateError } = await supabase
      .from("deposit_requests")
      .update({
        status,
        admin_comment,
        processed_at: new Date().toISOString(),
      })
      .eq("id", id)

    if (updateError) {
      console.error("‚ùå Error updating deposit request:", updateError)
      return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞" }, { status: 500 })
    }

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω, –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    if (status === "approved") {
      const { error: balanceError } = await supabase.rpc("update_user_balance", {
        p_user_id: depositRequest.user_id,
        p_amount: Number(depositRequest.amount),
        p_operation: "add",
      })

      if (balanceError) {
        console.error("‚ùå Error updating user balance:", balanceError)
        return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤" }, { status: 500 })
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await supabase
        .from("transactions")
        .update({ status: "completed" })
        .eq("user_id", depositRequest.user_id)
        .eq("type", "deposit")
        .eq("amount", depositRequest.amount)
        .eq("status", "pending")

      console.log("‚úÖ Deposit approved and balance updated")
    } else if (status === "rejected") {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await supabase
        .from("transactions")
        .update({ status: "failed" })
        .eq("user_id", depositRequest.user_id)
        .eq("type", "deposit")
        .eq("amount", depositRequest.amount)
        .eq("status", "pending")

      console.log("‚úÖ Deposit rejected")
    }

    return NextResponse.json({
      success: true,
      message: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${status === "approved" ? "–æ–¥–æ–±—Ä–µ–Ω" : "–æ—Ç–∫–ª–æ–Ω–µ–Ω"}`,
    })
  } catch (error) {
    console.error("‚ùå Admin deposit request update error:", error)
    return NextResponse.json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
  }
}
import { NextResponse } from "next/server"
import { query } from "@/lib/database"

export async function PUT(request: Request, { params }: { params: { id: string } }) {
  try {
    const { id } = params
    const body = await request.json()
    const { status, admin_comment } = body

    console.log("üîÑ Updating deposit request:", id, "Status:", status)

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    const depositResult = await query(
      `SELECT * FROM transactions WHERE id = $1 AND type = 'deposit'`,
      [id]
    )

    if (depositResult.rows.length === 0) {
      console.error("‚ùå Deposit request not found")
      return NextResponse.json({ error: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 })
    }

    const depositRequest = depositResult.rows[0]

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    await query(
      `UPDATE transactions SET status = $1, updated_at = NOW() WHERE id = $2`,
      [status, id]
    )

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω, –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    if (status === "completed") {
      await query(
        `UPDATE users SET balance = balance + $1 WHERE id = $2`,
        [depositRequest.amount, depositRequest.user_id]
      )

      console.log("‚úÖ Deposit approved and balance updated")
    }

    return NextResponse.json({
      success: true,
      message: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${status === "completed" ? "–æ–¥–æ–±—Ä–µ–Ω" : "–æ—Ç–∫–ª–æ–Ω–µ–Ω"}`,
    })
  } catch (error) {
    console.error("‚ùå Admin deposit request update error:", error)
    return NextResponse.json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
  }
}
