
import { NextRequest, NextResponse } from 'next/server'
import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken'
import { query } from '@/lib/database'

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json()

    console.log('üîê Login attempt for:', email)

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password) {
      console.log('‚ùå Missing email or password')
      return NextResponse.json({ 
        success: false,
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      }, { status: 400 })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      console.log('‚ùå Invalid email format:', email)
      return NextResponse.json({ 
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' 
      }, { status: 400 })
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const userResult = await query(
      `SELECT 
        id, 
        email, 
        full_name, 
        password_hash, 
        role_id, 
        status, 
        balance, 
        total_invested, 
        total_earned,
        created_at
      FROM users 
      WHERE LOWER(email) = LOWER($1)`,
      [email.trim()]
    )

    console.log('üîç Database query result:', userResult.rows.length)

    if (userResult.rows.length === 0) {
      console.log('‚ùå User not found:', email)
      return NextResponse.json({ 
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      }, { status: 401 })
    }

    const user = userResult.rows[0]
    console.log('‚úÖ User found:', user.email, 'Status:', user.status, 'Role ID:', user.role_id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.status !== 'active') {
      console.log('‚ùå User account is not active:', user.status)
      return NextResponse.json({ 
        success: false,
        error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' 
      }, { status: 401 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    let passwordValid = false
    
    try {
      // –î–µ–º–æ –ø–∞—Ä–æ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const demoCredentials = {
        'admin@example.com': 'admin123',
        'user@example.com': 'demo123',
        'demo@example.com': 'demo123',
        'zabon@mail.ru': 'zabon123'
      }

      const lowerEmail = email.toLowerCase().trim()
      
      if (demoCredentials[lowerEmail]) {
        // –î–ª—è –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        passwordValid = demoCredentials[lowerEmail] === password
        console.log('üîë Demo password check for', lowerEmail, ':', passwordValid)
      } else if (user.password_hash && user.password_hash.startsWith('$2')) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å bcrypt —Ö–µ—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º bcrypt
        passwordValid = await bcrypt.compare(password, user.password_hash)
        console.log('üîë Bcrypt password check:', passwordValid)
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ - –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
        passwordValid = false
        console.log('üîë No valid password method found')
      }
    } catch (error) {
      console.error('‚ùå Password validation error:', error)
      passwordValid = false
    }

    if (!passwordValid) {
      console.log('‚ùå Invalid password for user:', email)
      return NextResponse.json({ 
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      }, { status: 401 })
    }

    console.log('‚úÖ Password validation successful for:', user.email)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isAdmin = user.role_id === 1
    const role = isAdmin ? 'admin' : 'user'

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email,
        role: role,
        isAdmin: isAdmin
      },
      process.env.NEXTAUTH_SECRET || 'your-secret-key',
      { expiresIn: '7d' }
    )

    console.log('‚úÖ Login successful for:', user.email, 'Role:', role)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const redirectPath = isAdmin ? '/admin/dashboard' : '/dashboard'

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      id: user.id,
      email: user.email,
      full_name: user.full_name,
      balance: parseFloat(user.balance || '0'),
      total_invested: parseFloat(user.total_invested || '0'),
      total_earned: parseFloat(user.total_earned || '0'),
      role: role,
      isAdmin: isAdmin,
      created_at: user.created_at
    }

    const response = NextResponse.json({
      success: true,
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
      user: userData,
      token,
      redirect: redirectPath
    }, { status: 200 })

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∏
    response.cookies.set('auth-token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
      path: '/'
    })

    return response

  } catch (error) {
    console.error('üí• Login error:', error)
    
    return NextResponse.json({ 
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
    }, { status: 500 })
  }
}
