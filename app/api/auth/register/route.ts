import { type NextRequest, NextResponse } from "next/server"

// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
const registeredUsers: any[] = []

export async function POST(request: NextRequest) {
  try {
    console.log("üîê Starting registration process...")

    const { email, password, name } = await request.json()

    console.log("üìù Registration data received:", {
      name: name ? "‚úÖ" : "‚ùå",
      email: email ? "‚úÖ" : "‚ùå",
      password: password ? "‚úÖ" : "‚ùå",
    })

    if (!email || !password || !name) {
      return NextResponse.json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = registeredUsers.find((u) => u.email === email)
    if (existingUser) {
      return NextResponse.json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" }, { status: 400 })
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = {
      id: `user-${Date.now()}`,
      email,
      name,
      balance: 0,
      isAdmin: false,
      createdAt: new Date().toISOString(),
    }

    registeredUsers.push(newUser)

    console.log("‚úÖ New user registered:", email)

    return NextResponse.json({
      success: true,
      user: {
        id: newUser.id,
        email: newUser.email,
        name: newUser.name,
        balance: newUser.balance,
        isAdmin: newUser.isAdmin,
      },
    })
  } catch (error) {
    console.error("‚ùå Registration error:", error)
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
  }
}
