import { NextResponse } from "next/server"
import { createClient } from "@/lib/supabase/server"

export async function GET() {
  try {
    const supabase = createClient()

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const {
      data: { session },
    } = await supabase.auth.getSession()

    if (!session?.user?.id) {
      return NextResponse.json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" }, { status: 401 })
    }

    const { data, error } = await supabase
      .from("investments")
      .select("*")
      .eq("user_id", session.user.id)
      .order("created_at", { ascending: false })

    if (error) {
      console.error("‚ùå Error fetching investments:", error)
      return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π" }, { status: 500 })
    }

    return NextResponse.json(data || [])
  } catch (error) {
    console.error("‚ùå Investments API error:", error)
    return NextResponse.json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { plan_id, amount } = body

    console.log("üìà Creating investment:", { plan_id, amount })

    if (!plan_id || !amount) {
      return NextResponse.json({ error: "–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã" }, { status: 400 })
    }

    const supabase = createClient()

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const {
      data: { session },
    } = await supabase.auth.getSession()

    if (!session?.user?.id) {
      return NextResponse.json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" }, { status: 401 })
    }

    const userId = session.user.id

    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { data: plan, error: planError } = await supabase
      .from("investment_plans")
      .select("*")
      .eq("id", plan_id)
      .single()

    if (planError || !plan) {
      return NextResponse.json({ error: "–ü–ª–∞–Ω –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: profile, error: profileError } = await supabase
      .from("user_profiles")
      .select("balance")
      .eq("user_id", userId)
      .single()

    if (profileError || !profile) {
      return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞" }, { status: 500 })
    }

    if (Number(profile.balance) < Number(amount)) {
      return NextResponse.json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ" }, { status: 400 })
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
    const { data: investment, error: investmentError } = await supabase
      .from("investments")
      .insert([
        {
          user_id: userId,
          plan_id,
          amount: Number(amount),
          status: "active",
          profit_earned: 0,
          start_date: new Date().toISOString(),
          end_date: new Date(Date.now() + plan.duration_days * 24 * 60 * 60 * 1000).toISOString(),
        },
      ])
      .select()
      .single()

    if (investmentError) {
      console.error("‚ùå Error creating investment:", investmentError)
      return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏" }, { status: 500 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newBalance = Number(profile.balance) - Number(amount)
    const { error: balanceError } = await supabase
      .from("user_profiles")
      .update({ balance: newBalance })
      .eq("user_id", userId)

    if (balanceError) {
      console.error("‚ùå Error updating balance:", balanceError)
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const { data: transaction, error: transactionError } = await supabase
      .from("transactions")
      .insert([
        {
          user_id: userId,
          type: "investment",
          amount: Number(amount),
          status: "completed",
          description: `–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –ø–ª–∞–Ω "${plan.name}"`,
          method: "balance",
        },
      ])
      .select()
      .single()

    if (transactionError) {
      console.error("‚ùå Error creating transaction:", transactionError)
      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
    }

    console.log("‚úÖ Investment created:", investment.id)
    console.log("‚úÖ Transaction created:", transaction?.id)
    console.log("‚úÖ Balance updated:", newBalance)

    return NextResponse.json({
      success: true,
      message: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
      data: investment,
      newBalance,
    })
  } catch (error) {
    console.error("‚ùå Investment creation error:", error)
    return NextResponse.json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
  }
}
